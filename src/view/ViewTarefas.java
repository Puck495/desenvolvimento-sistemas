
package view;

import com.mysql.cj.x.protobuf.MysqlxConnection;
import model.Tarefa;
import dao.DAOTarefa;
import java.awt.Component;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import jdk.dynalink.linker.ConversionComparator;
import util.ConversoData;

public class ViewTarefas extends javax.swing.JFrame {
    
    DAOTarefa dAOTarefa = new DAOTarefa();
    Tarefa tare = new Tarefa();
    ArrayList<Tarefa>lista = dAOTarefa.listarTarefaDAO();
    String cadAlt = "Cad";
    
    public ViewTarefas() {
        initComponents();
        setLocationRelativeTo(this);
        atualizarTabela();
        setIconImage(new ImageIcon(getClass().getResource("/Imagens/icons8-área-de-transferência-100.png")).getImage());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTbTabela = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTFdescricao = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTFtarefa = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTFid = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jDCData = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTFHoraInicil = new javax.swing.JFormattedTextField();
        jTFHoraFim = new javax.swing.JFormattedTextField();
        jCBStatus = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jBtAdicionar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jBtPesquisarView = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Cadastro de Tarefas");
        setMaximumSize(new java.awt.Dimension(32767, 32767));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                windowFechar(evt);
            }
        });

        jTbTabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Tarefas", "Descrições", "Data", "H.Inicio", "H.Fim", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTbTabela.setToolTipText("");
        jTbTabela.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTbTabela);

        jLabel1.setText("Tarefas:");

        jLabel2.setText("Descrição:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Cadastrar Tarefas");

        jLabel4.setText("Tarefas:");

        jTFid.setEditable(false);
        jTFid.setEnabled(false);

        jLabel5.setText("ID");

        jDCData.setDateFormatString("dd'/'MM'/'y");

        jLabel6.setText("Data");

        jLabel7.setText("H.Início");

        jLabel8.setText("H.Final");

        try {
            jTFHoraInicil.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            jTFHoraFim.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jCBStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "PENDENTE", "EM ANDAMENTO", "CONCLUÍDO" }));

        jLabel9.setText("Status:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 952, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(264, 264, 264)
                                .addComponent(jLabel9))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jDCData, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jTFHoraInicil, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(42, 42, 42)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jTFHoraFim, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTFdescricao, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTFtarefa, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTFid)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jCBStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFtarefa, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTFid, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jCBStatus)
                    .addComponent(jTFdescricao, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jDCData, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(jTFHoraFim)
                    .addComponent(jTFHoraInicil))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jBtAdicionar.setText("Adicionar");
        jBtAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionAddAdicionar(evt);
            }
        });

        jButton2.setText("Limpar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionLimpar(evt);
            }
        });

        jButton3.setText("Fechar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionFechar(evt);
            }
        });

        jBtPesquisarView.setText("Pesquisar");
        jBtPesquisarView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionPesquisarView(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBtAdicionar)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jBtPesquisarView)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtAdicionar)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jBtPesquisarView))
                .addContainerGap(67, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void actionAddAdicionar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionAddAdicionar
     adicionarTarefas();   
    }//GEN-LAST:event_actionAddAdicionar

    private void actionFechar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionFechar
      UIManager.put("OptionPane.yesButtonText", "Sim");
      UIManager.put("OptionPane.noButtonText", "Não");
      
      int op = JOptionPane.showConfirmDialog(null, "Deseja Fechar?", "Atenção.", JOptionPane.YES_NO_OPTION);
      if (op == 0) {
          this.dispose();
      }
    }//GEN-LAST:event_actionFechar

    private void actionLimpar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionLimpar
    limparCampos();
    }//GEN-LAST:event_actionLimpar

    private void actionPesquisarView(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionPesquisarView
       ViewTelaPrincipal.pesquisarView();
    }//GEN-LAST:event_actionPesquisarView

    private void windowFechar(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowFechar
       UIManager.put("OptionPane.yesButtonText", "Sim");
       UIManager.put("OptionPane.noButtonText", "Não");
      
      int op = JOptionPane.showConfirmDialog(null, "Deseja encerrar a sessão?", "Sair.", JOptionPane.YES_NO_OPTION);
      if (op == 0) {
          dispose();
      }
    }//GEN-LAST:event_windowFechar

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewTarefas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewTarefas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewTarefas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewTarefas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewTarefas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtAdicionar;
    private javax.swing.JButton jBtPesquisarView;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jCBStatus;
    private com.toedter.calendar.JDateChooser jDCData;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFormattedTextField jTFHoraFim;
    private javax.swing.JFormattedTextField jTFHoraInicil;
    private javax.swing.JTextField jTFdescricao;
    private javax.swing.JTextField jTFid;
    private javax.swing.JTextField jTFtarefa;
    private javax.swing.JTable jTbTabela;
    // End of variables declaration//GEN-END:variables

    private void adicionarTarefas() {
        DateTimeFormatter formatadorHora = DateTimeFormatter.ofPattern("HH:mm");
        
        Date dataSelecionada = jDCData.getDate();
        String horaInicioTexto = jTFHoraInicil.getText();
        String horaFimTexto = jTFHoraFim.getText();
        
        //Verificação de hora no formato correto
        LocalTime horaInicio;
        LocalTime horaFim;
         if (jTFtarefa.getText().trim().equals("") || jTFdescricao.getText().trim().equals("")
                 || jCBStatus.getSelectedItem().equals("")) {
             JOptionPane.showMessageDialog(null, "Preencher os campos vazios.", "Atenção.", JOptionPane.ERROR_MESSAGE);
             return;
             
            
        }
        
        try {
            horaInicio = LocalTime.parse(horaInicioTexto, formatadorHora);
            horaFim = LocalTime.parse(horaFimTexto, formatadorHora);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Hora inválida! Use o formato HH:mm", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        } 
        
        //Date dataSelecionada = jDCData.getDate()
     tare.setTarefa(jTFtarefa.getText());
     tare.setDescricao(jTFdescricao.getText());
     tare.setDataTarefa(ConversoData.converterDateParaLocalDate(dataSelecionada));
     tare.setHoraInicio(LocalTime.parse(jTFHoraInicil.getText()));
     tare.setHoraFim(LocalTime.parse(jTFHoraFim.getText()));
     tare.setStatus(String.valueOf(jCBStatus.getSelectedItem()));
     
        if (cadAlt.equals("Cad")) {
           if (dAOTarefa.salvarTarefaDAO(tare) > 0) {
            JOptionPane.showMessageDialog(null, "Cadastro OK.", "Cadastro", JOptionPane.INFORMATION_MESSAGE);
            limparCampos();
            atualizarTabela();
        } else {
            JOptionPane.showMessageDialog(null, "Erro ao Cadastrar.", "Cadastro", JOptionPane.ERROR_MESSAGE);
        } 
           
        } else {
            tare.setId(Integer.parseInt(jTFid.getText()));
            if (dAOTarefa.editarTarefa(tare)){
                JOptionPane.showMessageDialog(null, "Tarefa Atualizada Com Sucesso.", "Cadastro", JOptionPane.INFORMATION_MESSAGE);
                limparCampos();
                atualizarTabela();
                cadAlt = "Cad";
            } else {
                JOptionPane.showMessageDialog(null, "Erro ao Atualizar.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        
    }

    private void atualizarTabela() {
        DAOTarefa dao = new DAOTarefa();
        lista = dao.listarTarefaDAO();
     DefaultTableModel model = (DefaultTableModel) jTbTabela.getModel();
       model.setRowCount(0);
       
        for (Tarefa t : lista) {
            model.addRow(new Object[]{
            t.getId(),
            t.getTarefa(),
            t.getDescricao(),
            t.getDataTarefa(),
            t.getHoraInicio(),
            t.getHoraFim(),
            t.getStatus()
                    
            });
            aplicarFormatoDataBR(jTbTabela, 3);
        }  
    }

    private void limparCampos() {
    jTFtarefa.setText("");
    jTFdescricao.setText("");
    jTFid.setText("");
    jDCData.setDate(null);
    jTFHoraInicil.setText("");
    jTFHoraFim.setText("");
    jCBStatus.setSelectedIndex(0);
    }
    
    private void editarTarefa() {
   //editar tarefa através do ID retornado do banco
    cadAlt = "Alt";
    
    int linha = jTbTabela.getSelectedRow();
        if (linha < 0) {
        JOptionPane.showMessageDialog(null, "Você deve selecionar um Registro.", "Erro.", JOptionPane.ERROR_MESSAGE);
        } else {
            // Pega os dados diretamente da tabela.
            int id = (int) jTbTabela.getValueAt(linha, 0);
            String tarefa = (String) jTbTabela.getValueAt(linha, 1);
            String descricao = (String) jTbTabela.getValueAt(linha, 2);
            LocalDate dtTarefa = (LocalDate) jTbTabela.getValueAt(linha, 3);
            LocalTime hrInicio = (LocalTime) jTbTabela.getValueAt(linha, 4);
            LocalTime hrFim = (LocalTime) jTbTabela.getValueAt(linha, 5);
            String status = (String) jTbTabela.getValueAt(linha, 6);
            
            //Criar e preenche o objeto tarefa com os dados selecionados.
            tare = new Tarefa();
            tare.setId(id);
            tare.setTarefa(tarefa);
            tare.setDescricao(descricao);
            tare.setDataTarefa(dtTarefa);
            tare.setHoraInicio((hrInicio));
            tare.setHoraFim((hrFim));
            tare.setStatus(status);
            
            //Preenche ps campos de texto.
            jTFid.setText(String.valueOf(id));
            jTFtarefa.setText(tarefa);
            jTFdescricao.setText(descricao);
            jDCData.setDate(ConversoData.converterLocalDateParaDate(dtTarefa));
            jTFHoraInicil.setText(String.valueOf(hrInicio));
            jTFHoraFim.setText(String.valueOf(hrFim));
            jCBStatus.setSelectedItem(status);
        }
    }
       private void excluirTarefaDAO(){
           //excluir tarefa
           DAOTarefa dao = new DAOTarefa();
           int linha = jTbTabela.getSelectedRow();
           if (linha < 0) {
               JOptionPane.showMessageDialog(null, "Você deve selecionar um registro.", "Erro.", JOptionPane.ERROR_MESSAGE);
           }else{
               //Pega os dados diretamente da tabela
               int id = (int) jTbTabela.getValueAt(linha, 0);
               if (id != 0) {
                   this.tare = new Tarefa();
                   tare.setId(id);
                   //tare.getId();
                   
                   dao.excluirTarefaDAO(tare.getId());
                   JOptionPane.showMessageDialog(null, "Cadastro excluido com sucesso.", "Cadastro.", JOptionPane.INFORMATION_MESSAGE);
                   atualizarTabela();
               }else{
                   JOptionPane.showMessageDialog(null, "Erro ao Excluiir o Cadastro.", "Erro.", JOptionPane.ERROR_MESSAGE);
               }
           }
           
           
                   
       }

    private void pesquisarTarefa() {
        
    }
   
    private void aplicarFormatoDataBR(JTable tabela, int indiceColunaData){
        
        
        tabela.getColumnModel().getColumn(indiceColunaData).setCellRenderer(new DefaultTableCellRenderer(){
            
            private final DateTimeFormatter formatoBR = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            
            @Override
            public Component getTableCellRendererComponent (JTable table, Object value,
                   boolean isSeleted, boolean hasFocus,
                   int row, int column){
                if (value instanceof LocalDate) {
                    value = ((LocalDate)value).format(formatoBR);
                }
                return super.getTableCellRendererComponent(jTbTabela, value, isSeleted, hasFocus, row, column);
            }
        });
    }

    private void pesquisarView() {
//        ViewPesquisar viewPesquisar = new ViewPesquisar();
//        int op = 0;
//        if (op == 0) {
//        viewPesquisar = new ViewPesquisar();
//        
//        }
//        //this.dispose();
//        viewPesquisar.setVisible(true);
//        viewPesquisar.setLocationRelativeTo(this);
        
    }
    
    }
