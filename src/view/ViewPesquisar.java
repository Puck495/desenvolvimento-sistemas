
package view;

import com.mysql.cj.x.protobuf.MysqlxConnection;
import model.Tarefa;
import dao.DAOTarefa;
import java.awt.Component;
import java.awt.desktop.QuitEvent;
import java.text.DateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DateFormatter;
import jdk.dynalink.linker.ConversionComparator;
import util.ConversoData;

public class ViewPesquisar extends javax.swing.JFrame {
    //ViewTarefas viewTarefas = new ViewTarefas();
    
    DAOTarefa dAOTarefa = new DAOTarefa();
    Tarefa tare = new Tarefa();
    ArrayList<Tarefa>lista = dAOTarefa.listarTarefaDAO();
    String cadAlt = "Cad";
    String dataPeriodo;
    
    public ViewPesquisar() {
        initComponents();
        setLocationRelativeTo(this);
        atualizarTabela();
        preencherComboDatas();
        jRBporData.setSelected(true); //Iniciar Radion button selecionado.
        setIconImage(new ImageIcon(getClass().getResource("/Imagens/icons8-olho-para-cima-100.png")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btGPesquisar = new javax.swing.ButtonGroup();
        jPPrincipal = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTFdescricao = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTFtarefa = new javax.swing.JTextField();
        jTFid = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jDCData = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTFHoraInicil = new javax.swing.JFormattedTextField();
        jTFHoraFim = new javax.swing.JFormattedTextField();
        jPPesquisar = new javax.swing.JPanel();
        jPPorData = new javax.swing.JPanel();
        jRBporData = new javax.swing.JRadioButton();
        jCBdatas = new javax.swing.JComboBox<>();
        jPPorPeriodo = new javax.swing.JPanel();
        jRBporPeriodo = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        jDCdtInicio = new com.toedter.calendar.JDateChooser();
        jDCdtFim = new com.toedter.calendar.JDateChooser();
        jPComandosPesquisar = new javax.swing.JPanel();
        jBtPesquisa = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jBtAtualizar = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPtarefas = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTbTabela = new javax.swing.JTable();
        jCBStatusP = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Pesquisa de Tarefas");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                windowFechar(evt);
            }
        });

        jLabel1.setText("Tarefas:");

        jLabel2.setText("Descrição:");

        jTFdescricao.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Cadastrar Tarefas");

        jTFtarefa.setEnabled(false);

        jTFid.setEditable(false);
        jTFid.setEnabled(false);

        jLabel5.setText("ID");

        jDCData.setDateFormatString("dd'/'MM'/'y");
        jDCData.setEnabled(false);

        jLabel6.setText("Data");

        jLabel7.setText("H.Início");

        jLabel8.setText("H.Final");

        try {
            jTFHoraInicil.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jTFHoraInicil.setEnabled(false);

        try {
            jTFHoraFim.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jTFHoraFim.setEnabled(false);

        jPPesquisar.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pesquisar", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI", 1, 18))); // NOI18N

        jPPorData.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Por Data:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N

        btGPesquisar.add(jRBporData);
        jRBporData.setText("Data:");
        jRBporData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionHabilitarPesquisarData(evt);
            }
        });

        jCBdatas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        jCBdatas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBdatasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPPorDataLayout = new javax.swing.GroupLayout(jPPorData);
        jPPorData.setLayout(jPPorDataLayout);
        jPPorDataLayout.setHorizontalGroup(
            jPPorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPorDataLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPPorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRBporData)
                    .addComponent(jCBdatas, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPPorDataLayout.setVerticalGroup(
            jPPorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPorDataLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRBporData)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCBdatas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPPorPeriodo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Por Período:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N

        btGPesquisar.add(jRBporPeriodo);
        jRBporPeriodo.setText("Dt. Início:");
        jRBporPeriodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionHabilitarPeriodoDatas(evt);
            }
        });

        jLabel9.setText("Dt.Fim:");

        jDCdtInicio.setDateFormatString("dd'/'MM'/'y");
        jDCdtInicio.setEnabled(false);

        jDCdtFim.setDateFormatString("dd'/'MM'/' y");
        jDCdtFim.setEnabled(false);

        javax.swing.GroupLayout jPPorPeriodoLayout = new javax.swing.GroupLayout(jPPorPeriodo);
        jPPorPeriodo.setLayout(jPPorPeriodoLayout);
        jPPorPeriodoLayout.setHorizontalGroup(
            jPPorPeriodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPorPeriodoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPPorPeriodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9)
                    .addComponent(jRBporPeriodo)
                    .addComponent(jDCdtInicio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jDCdtFim, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE))
                .addGap(0, 62, Short.MAX_VALUE))
        );
        jPPorPeriodoLayout.setVerticalGroup(
            jPPorPeriodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPorPeriodoLayout.createSequentialGroup()
                .addComponent(jRBporPeriodo)
                .addGap(5, 5, 5)
                .addComponent(jDCdtInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDCdtFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPComandosPesquisar.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Comandos Pesquisar:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N

        jBtPesquisa.setText("Pesquisar");
        jBtPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionPesquisarTarefa(evt);
            }
        });

        jButton2.setText("Limpar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionLimpar(evt);
            }
        });

        javax.swing.GroupLayout jPComandosPesquisarLayout = new javax.swing.GroupLayout(jPComandosPesquisar);
        jPComandosPesquisar.setLayout(jPComandosPesquisarLayout);
        jPComandosPesquisarLayout.setHorizontalGroup(
            jPComandosPesquisarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPComandosPesquisarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBtPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPComandosPesquisarLayout.setVerticalGroup(
            jPComandosPesquisarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPComandosPesquisarLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPComandosPesquisarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtPesquisa)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPPesquisarLayout = new javax.swing.GroupLayout(jPPesquisar);
        jPPesquisar.setLayout(jPPesquisarLayout);
        jPPesquisarLayout.setHorizontalGroup(
            jPPesquisarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPesquisarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPPorData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 196, Short.MAX_VALUE)
                .addComponent(jPPorPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(99, 99, 99)
                .addComponent(jPComandosPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPPesquisarLayout.setVerticalGroup(
            jPPesquisarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPesquisarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPPesquisarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPPorData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPComandosPesquisar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPPorPeriodo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton5.setText("Tarefas");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionTarefas(evt);
            }
        });

        jBtAtualizar.setText("Atualizar");
        jBtAtualizar.setEnabled(false);
        jBtAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionAddAdicionar(evt);
            }
        });

        jButton4.setText("Editar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionEditar(evt);
            }
        });

        jButton1.setText("Excluir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionExcluirTarefa(evt);
            }
        });

        jButton3.setText("Fechar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionFechar(evt);
            }
        });

        jPtarefas.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tarefas", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI", 0, 18))); // NOI18N

        jTbTabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Tarefas", "Descrições", "Data", "H.Inicio", "H.Fim", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTbTabela.setToolTipText("");
        jTbTabela.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTbTabela);
        if (jTbTabela.getColumnModel().getColumnCount() > 0) {
            jTbTabela.getColumnModel().getColumn(0).setHeaderValue("ID");
            jTbTabela.getColumnModel().getColumn(1).setHeaderValue("Tarefas");
            jTbTabela.getColumnModel().getColumn(2).setHeaderValue("Descrições");
            jTbTabela.getColumnModel().getColumn(3).setHeaderValue("Data");
            jTbTabela.getColumnModel().getColumn(4).setHeaderValue("H.Inicio");
            jTbTabela.getColumnModel().getColumn(5).setHeaderValue("H.Fim");
            jTbTabela.getColumnModel().getColumn(6).setHeaderValue("Status");
        }

        javax.swing.GroupLayout jPtarefasLayout = new javax.swing.GroupLayout(jPtarefas);
        jPtarefas.setLayout(jPtarefasLayout);
        jPtarefasLayout.setHorizontalGroup(
            jPtarefasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 942, Short.MAX_VALUE)
        );
        jPtarefasLayout.setVerticalGroup(
            jPtarefasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPtarefasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jCBStatusP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "PENDENTE", "EM ANDAMENTO", "CONCLUÍDO" }));
        jCBStatusP.setEnabled(false);

        jLabel4.setText("Staus:");

        javax.swing.GroupLayout jPPrincipalLayout = new javax.swing.GroupLayout(jPPrincipal);
        jPPrincipal.setLayout(jPPrincipalLayout);
        jPPrincipalLayout.setHorizontalGroup(
            jPPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPPesquisar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPPrincipalLayout.createSequentialGroup()
                        .addGroup(jPPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDCData, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(36, 36, 36)
                        .addGroup(jPPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTFHoraInicil, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(jPPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPPrincipalLayout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPPrincipalLayout.createSequentialGroup()
                                .addComponent(jTFHoraFim, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPPrincipalLayout.createSequentialGroup()
                        .addGroup(jPPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPtarefas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPPrincipalLayout.createSequentialGroup()
                                .addComponent(jBtAtualizar)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4)
                                .addGap(18, 18, 18)
                                .addComponent(jButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPPrincipalLayout.createSequentialGroup()
                                .addGroup(jPPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPPrincipalLayout.createSequentialGroup()
                                        .addComponent(jTFtarefa)
                                        .addGap(30, 30, 30))
                                    .addGroup(jPPrincipalLayout.createSequentialGroup()
                                        .addGroup(jPPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel1)
                                            .addComponent(jTFdescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 517, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(jPPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPPrincipalLayout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(393, 393, 393))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPPrincipalLayout.createSequentialGroup()
                                        .addComponent(jTFid, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(308, 308, 308))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPPrincipalLayout.createSequentialGroup()
                                        .addComponent(jCBStatusP, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(269, 269, 269))
                                    .addComponent(jLabel4))))
                        .addContainerGap())))
        );
        jPPrincipalLayout.setVerticalGroup(
            jPPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPPrincipalLayout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPtarefas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 26, Short.MAX_VALUE)
                .addGroup(jPPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTFid, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTFtarefa, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFdescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBStatusP, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDCData, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTFHoraInicil, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTFHoraFim, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addGroup(jPPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtAtualizar)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3))
                .addGap(35, 35, 35))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void actionAddAdicionar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionAddAdicionar
     salvarTarefas();   
    }//GEN-LAST:event_actionAddAdicionar

    private void actionFechar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionFechar
      UIManager.put("OptionPane.yesButtonText", "Sim");
      UIManager.put("OptionPane.noButtonText", "Não");
      
      int op = JOptionPane.showConfirmDialog(null, "Deseja Fechar?", "Atenção.", JOptionPane.YES_NO_OPTION);
      if (op == 0) {
         dispose();
      }
    }//GEN-LAST:event_actionFechar

    private void actionLimpar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionLimpar
    limparCampos();
    }//GEN-LAST:event_actionLimpar

    private void actionEditar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionEditar
        editarTarefa();
    }//GEN-LAST:event_actionEditar

    private void actionExcluirTarefa(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionExcluirTarefa
      excluirTarefaDAO();  
    }//GEN-LAST:event_actionExcluirTarefa

    private void actionHabilitarPesquisarData(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionHabilitarPesquisarData
     jCBdatas.setEnabled(true); //Habilitar datas
     jDCdtInicio.setEnabled(false); //Desabilito
     jDCdtInicio.setDate(null); //Limpar campo
     jDCdtFim.setEnabled(false); //Desabilitar
     jDCdtFim.setDate(null); //Limpar campo
    }//GEN-LAST:event_actionHabilitarPesquisarData

    private void actionHabilitarPeriodoDatas(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionHabilitarPeriodoDatas
        jDCdtInicio.setEnabled(true); //Habilitar
        jDCdtFim.setEnabled(true); //Habilitar
        jCBdatas.setEnabled(false); //Desabilitar
        jCBdatas.setSelectedIndex(0); //Limpar
    }//GEN-LAST:event_actionHabilitarPeriodoDatas

    private void actionTarefas(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionTarefas
        ViewTelaPrincipal.tarefasView();
    }//GEN-LAST:event_actionTarefas

    private void actionPesquisarTarefa(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionPesquisarTarefa
       pesquisarTarefa();
    }//GEN-LAST:event_actionPesquisarTarefa

    private void jCBdatasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBdatasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBdatasActionPerformed

    private void windowFechar(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowFechar
        UIManager.put("OptionPane.yesButtonText", "Sim");
       UIManager.put("OptionPane.noButtonText", "Não");
      
      int op = JOptionPane.showConfirmDialog(null, "Deseja encerrar a sessão?", "Sair.", JOptionPane.YES_NO_OPTION);
      if (op == 0) {
          dispose();
          //System.exit(0);
      }
    }//GEN-LAST:event_windowFechar

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewTarefas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewTarefas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewTarefas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewTarefas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewPesquisar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btGPesquisar;
    private javax.swing.JButton jBtAtualizar;
    private javax.swing.JButton jBtPesquisa;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jCBStatusP;
    private javax.swing.JComboBox<String> jCBdatas;
    private com.toedter.calendar.JDateChooser jDCData;
    private com.toedter.calendar.JDateChooser jDCdtFim;
    private com.toedter.calendar.JDateChooser jDCdtInicio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPComandosPesquisar;
    private javax.swing.JPanel jPPesquisar;
    private javax.swing.JPanel jPPorData;
    private javax.swing.JPanel jPPorPeriodo;
    private javax.swing.JPanel jPPrincipal;
    private javax.swing.JPanel jPtarefas;
    private javax.swing.JRadioButton jRBporData;
    private javax.swing.JRadioButton jRBporPeriodo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFormattedTextField jTFHoraFim;
    private javax.swing.JFormattedTextField jTFHoraInicil;
    private javax.swing.JTextField jTFdescricao;
    private javax.swing.JTextField jTFid;
    private javax.swing.JTextField jTFtarefa;
    private javax.swing.JTable jTbTabela;
    // End of variables declaration//GEN-END:variables

    private void salvarTarefas() {
        DateTimeFormatter formatadorHora = DateTimeFormatter.ofPattern("HH:mm");
        
        Date dataSelecionada = jDCData.getDate();
        String horaInicioTexto = jTFHoraInicil.getText();
        String horaFimTexto = jTFHoraFim.getText();
        
        //Verificação de hora no formato correto
        LocalTime horaInicio;
        LocalTime horaFim;
        
        if (jTFtarefa.getText().trim().equals("") || jTFdescricao.getText().trim().equals("")
                 || jCBStatusP.getSelectedItem().equals("")) {
             JOptionPane.showMessageDialog(null, "Preencher os campos vazios.", "Atenção.", JOptionPane.ERROR_MESSAGE);
             return;
        }
        
        try {
            horaInicio = LocalTime.parse(horaInicioTexto, formatadorHora);
            horaFim = LocalTime.parse(horaFimTexto, formatadorHora);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Hora inválida! Use o formato HH:mm", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        } 
        
        //Date dataSelecionada = jDCData.getDate()
     tare.setTarefa(jTFtarefa.getText());
     tare.setDescricao(jTFdescricao.getText());
     tare.setDataTarefa(ConversoData.converterDateParaLocalDate(dataSelecionada));
     tare.setHoraInicio(LocalTime.parse(jTFHoraInicil.getText()));
     tare.setHoraFim(LocalTime.parse(jTFHoraFim.getText()));
     tare.setStatus(String.valueOf(jCBStatusP.getSelectedItem()));
     
     if (horaFim.isBefore(horaInicio)||horaFim.equals(horaInicio)){//Valida hora fim para não maior que hora inicio
         JOptionPane.showMessageDialog(null, "Hora Fim não pode ser Menor ou Igual a Hora Inicio.", "Error.", JOptionPane.ERROR_MESSAGE);
         return;
     }
//        if (cadAlt.equals("Cad")) {
//           if (dAOTarefa.salvarTarefaDAO(tare) > 0) {
//            JOptionPane.showMessageDialog(null, "Cadastro OK.", "Cadastro", JOptionPane.INFORMATION_MESSAGE);
//            limparCampos();
//            atualizarTabela();
//           
//        } else {
//            JOptionPane.showMessageDialog(null, "Erro ao Cadastrar.", "Cadastro", JOptionPane.ERROR_MESSAGE);
//        } 
//        }
            tare.setId(Integer.parseInt(jTFid.getText()));
            if (dAOTarefa.editarTarefa(tare)){
                JOptionPane.showMessageDialog(null, "Tarefa Atualizada Com Sucesso.", "Cadastro", JOptionPane.INFORMATION_MESSAGE);
                limparCampos();
                desabilitarCampos();
                atualizarTabela();
                cadAlt = "Cad";
            } else {
                JOptionPane.showMessageDialog(null, "Erro ao Atualizar.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        
        
    }

    private void atualizarTabela() {
        DAOTarefa dao = new DAOTarefa();
        lista = dao.listarTarefaDAO();
     DefaultTableModel model = (DefaultTableModel) jTbTabela.getModel();
       model.setRowCount(0);
       
        for (Tarefa t : lista) {
            model.addRow(new Object[]{
            t.getId(),
            t.getTarefa(),
            t.getDescricao(),
            t.getDataTarefa(),
            t.getHoraInicio(),
            t.getHoraFim(),
            t.getStatus()
                    
            });
            aplicarFormatoDataBR(jTbTabela, 3);
        }  
    }

    private void limparCampos() {
    jTFtarefa.setText("");
    jTFdescricao.setText("");
    jTFid.setText("");
    jDCData.setDate(null);
    jTFHoraInicil.setText("");
    jTFHoraFim.setText("");
    jDCdtInicio.setDate(null);
    jDCdtFim.setDate(null);
    jDCdtInicio.setEnabled(false);
    jDCdtFim.setEnabled(false);
    btGPesquisar.clearSelection();
    jCBdatas.setSelectedIndex(0);
    jCBdatas.setEnabled(true);
    jRBporData.setSelected(true);//Selecionar novamente para o botão datas
    jCBStatusP.setSelectedIndex(0);
    desabilitarCampos();
    }
    
    private void editarTarefa() {
   //editar tarefa através do ID retornado do banco
    cadAlt = "Alt";
    
    int linha = jTbTabela.getSelectedRow();
        if (linha < 0) {
        JOptionPane.showMessageDialog(null, "Você deve selecionar um Registro.", "Erro.", JOptionPane.ERROR_MESSAGE);
        desabilitarCampos();
        } else {
            // Pega os dados diretamente da tabela.
            int id = (int) jTbTabela.getValueAt(linha, 0);
            String tarefa = (String) jTbTabela.getValueAt(linha, 1);
            String descricao = (String) jTbTabela.getValueAt(linha, 2);
            LocalDate dtTarefa = (LocalDate) jTbTabela.getValueAt(linha, 3);
            LocalTime hrInicio = (LocalTime) jTbTabela.getValueAt(linha, 4);
            LocalTime hrFim = (LocalTime) jTbTabela.getValueAt(linha, 5);
            String status = (String) jTbTabela.getValueAt(linha, 6);
            
            //Criar e preenche o objeto tarefa com os dados selecionados.
            tare = new Tarefa();
            tare.setId(id);
            tare.setTarefa(tarefa);
            tare.setDescricao(descricao);
            tare.setDataTarefa(dtTarefa);
            tare.setHoraInicio((hrInicio));
            tare.setHoraFim((hrFim));
            tare.setStatus(status);
            
            //Preenche ps campos de texto.
            jTFid.setText(String.valueOf(id));
            jTFtarefa.setText(tarefa);
            jTFdescricao.setText(descricao);
            jDCData.setDate(ConversoData.converterLocalDateParaDate(dtTarefa));
            jTFHoraInicil.setText(String.valueOf(hrInicio));
            jTFHoraFim.setText(String.valueOf(hrFim));
            jCBStatusP.setSelectedItem(status);
            
            habilitarCampos();
        }
    }
       private void excluirTarefaDAO(){
           //excluir tarefa
           DAOTarefa dao = new DAOTarefa();
           int linha = jTbTabela.getSelectedRow();
           if (linha < 0) {
               JOptionPane.showMessageDialog(null, "Você deve selecionar um registro.", "Erro.", JOptionPane.ERROR_MESSAGE);
           }else{
               //Pega os dados diretamente da tabela
               int id = (int) jTbTabela.getValueAt(linha, 0);
               if (id != 0) {
                   this.tare = new Tarefa();
                   tare.setId(id);
                   //tare.getId();
                   UIManager.put("OptionPane.yesButtonText", "Sim");
                   UIManager.put("OptionPane.noButtonText", "Não");
      
                   int op = JOptionPane.showConfirmDialog(null, "Deseja excluir o cadastro?", "Aviso.", JOptionPane.YES_NO_OPTION);
                   if (op == 0) {
                       
                       dao.excluirTarefaDAO(tare.getId());
                   JOptionPane.showMessageDialog(null, "Cadastro excluido com sucesso.", "Cadastro.", JOptionPane.INFORMATION_MESSAGE);
                   atualizarTabela();
                   }
                   
                   
               }else{
                   JOptionPane.showMessageDialog(null, "Erro ao Excluiir o Cadastro.", "Erro.", JOptionPane.ERROR_MESSAGE);
               }
           }
           
           
                   
       }

    private void pesquisarTarefa() {
    
        if (jRBporData.isSelected()) {
            dataPeriodo = "data";
        } else if(jRBporPeriodo.isSelected()){
            dataPeriodo = "periodo";
        }
        DateTimeFormatter formatador = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        DefaultTableModel model = (DefaultTableModel) jTbTabela.getModel();
        model.setRowCount(0);
        
        if (dataPeriodo.equals("data")) {
            //Pesquisa por data única
            String dataSelecionada = (String) jCBdatas.getSelectedItem();
            if (dataSelecionada != null && !dataSelecionada.isEmpty()) {
                try {
                    LocalDate dataT = LocalDate.parse(dataSelecionada, formatador);
                    DAOTarefa dao = new DAOTarefa();
                    lista = dao.listarDataTarefasDAO(dataT);
                    
                    for (Tarefa tarefa : lista) {
                        model.addRow(new Object[]{
                            tarefa.getId(),
                            tarefa.getTarefa(),
                            tarefa.getDescricao(),
                            tarefa.getDataTarefa(),
                            tarefa.getHoraInicio(),
                            tarefa.getHoraFim(),
                            tarefa.getStatus()
                        });
                    }
                    aplicarFormatoDataBR(jTbTabela, 3);
                } catch (DateTimeParseException e) {
                    JOptionPane.showMessageDialog(null, "Data Invalída!", "Erro.", JOptionPane.ERROR_MESSAGE);
                }
                
            } else {
                JOptionPane.showMessageDialog(null, "Data inválida no campo.", "Aviso!", JOptionPane.WARNING_MESSAGE);
            }
            
        } else if(dataPeriodo.equals("periodo")) {
            //Pesquisar por Periodo
            Date inicio = jDCdtInicio.getDate();
            Date fim = jDCdtFim.getDate();
            
            if (inicio != null && fim != null) {
                LocalDate dataInicio = inicio.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                LocalDate dataFim = fim.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                
                // Validação: fim não pode ser menor que início
                if (dataFim.isBefore(dataInicio)) {
                    JOptionPane.showMessageDialog(null, "A data não pode ser menor que a data inicial.", "Error.", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                DAOTarefa dao = new DAOTarefa();
                lista = dao.listarTarefasPorIntervalo(dataInicio, dataFim);
                
                for (Tarefa t1 : lista) {
                    model.addRow(new Object[]{
                        t1.getId(),
                        t1.getTarefa(),
                        t1.getDescricao(),
                        t1.getDataTarefa(),
                        t1.getHoraInicio(),
                        t1.getHoraFim(),
                        t1.getStatus()
                    });
                }
                aplicarFormatoDataBR(jTbTabela, 3);
                
            } else {
                JOptionPane.showMessageDialog(null, "Preencha as duas datas do período!", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        }
        
    }
   
    private void aplicarFormatoDataBR(JTable tabela, int indiceColunaData){
        
        
        tabela.getColumnModel().getColumn(indiceColunaData).setCellRenderer(new DefaultTableCellRenderer(){
            
            private final DateTimeFormatter formatoBR = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            
            @Override
            public Component getTableCellRendererComponent (JTable table, Object value,
                   boolean isSeleted, boolean hasFocus,
                   int row, int column){
                if (value instanceof LocalDate) {
                    value = ((LocalDate)value).format(formatoBR);
                }
                return super.getTableCellRendererComponent(jTbTabela, value, isSeleted, hasFocus, row, column);
            }
        });
    }
    
    private void preencherComboDatas() {
        ArrayList<LocalDate> dates = new DAOTarefa().listarDatasTarefasDAO();
       DateTimeFormatter formatador = DateTimeFormatter.ofPattern("dd/MM/yyyy");
       
        for (LocalDate date : dates) {
            jCBdatas.addItem(date.format(formatador));
        }
    }

    private void viewTarefas() {   
//     if (viewTarefas == null) {
//         viewTarefas = new ViewTarefas();
//         
//        }
//        //this.dispose();
//        viewTarefas.setVisible(true);
//        viewTarefas.setLocationRelativeTo(this);
    }
/**
 * Habilitar os campos para edição da tarefa.
 */
    private void habilitarCampos() {
       jTFtarefa.setEnabled(true);
       jTFdescricao.setEnabled(true);
       jDCData.setEnabled(true);
       jTFHoraInicil.setEnabled(true);
       jTFHoraFim.setEnabled(true);
       jDCdtInicio.setEnabled(true);
       jDCdtFim.setEnabled(true);
       jBtAtualizar.setEnabled(true);
       jCBStatusP.setEnabled(true);
       
    }
    /**
     * Desabilitar os campos para a edição da tarefa.
     */
    private void desabilitarCampos() {
       jTFtarefa.setEnabled(false);
       jTFdescricao.setEnabled(false);
       jDCData.setEnabled(false);
       jTFHoraInicil.setEnabled(false);
       jTFHoraFim.setEnabled(false);
       jDCdtInicio.setEnabled(false);
       jDCdtFim.setEnabled(false);
       jBtAtualizar.setEnabled(false);
       jCBStatusP.setEnabled(false);
       
    }
 
    }
